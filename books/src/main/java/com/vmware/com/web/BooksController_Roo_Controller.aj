// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.vmware.com.web;

import com.vmware.com.domain.Books;
import java.io.UnsupportedEncodingException;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.String;
import javax.annotation.PostConstruct;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.core.convert.converter.Converter;
import org.springframework.core.convert.support.GenericConversionService;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect BooksController_Roo_Controller {
    
    @Autowired
    private GenericConversionService BooksController.conversionService;
    
    @RequestMapping(method = RequestMethod.POST)
    public String BooksController.create(@Valid Books books, BindingResult result, Model model, HttpServletRequest request) {
        if (result.hasErrors()) {
            model.addAttribute("books", books);
            addDateTimeFormatPatterns(model);
            return "bookses/create";
        }
        books.persist();
        return "redirect:/bookses/" + encodeUrlPathSegment(books.getId().toString(), request);
    }
    
    @RequestMapping(params = "form", method = RequestMethod.GET)
    public String BooksController.createForm(Model model) {
        model.addAttribute("books", new Books());
        addDateTimeFormatPatterns(model);
        return "bookses/create";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    public String BooksController.show(@PathVariable("id") Long id, Model model) {
        addDateTimeFormatPatterns(model);
        model.addAttribute("books", Books.findBooks(id));
        model.addAttribute("itemId", id);
        return "bookses/show";
    }
    
    @RequestMapping(method = RequestMethod.GET)
    public String BooksController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model model) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            model.addAttribute("bookses", Books.findBooksEntries(page == null ? 0 : (page.intValue() - 1) * sizeNo, sizeNo));
            float nrOfPages = (float) Books.countBookses() / sizeNo;
            model.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            model.addAttribute("bookses", Books.findAllBookses());
        }
        addDateTimeFormatPatterns(model);
        return "bookses/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT)
    public String BooksController.update(@Valid Books books, BindingResult result, Model model, HttpServletRequest request) {
        if (result.hasErrors()) {
            model.addAttribute("books", books);
            addDateTimeFormatPatterns(model);
            return "bookses/update";
        }
        books.merge();
        return "redirect:/bookses/" + encodeUrlPathSegment(books.getId().toString(), request);
    }
    
    @RequestMapping(value = "/{id}", params = "form", method = RequestMethod.GET)
    public String BooksController.updateForm(@PathVariable("id") Long id, Model model) {
        model.addAttribute("books", Books.findBooks(id));
        addDateTimeFormatPatterns(model);
        return "bookses/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    public String BooksController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model model) {
        Books.findBooks(id).remove();
        model.addAttribute("page", (page == null) ? "1" : page.toString());
        model.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/bookses?page=" + ((page == null) ? "1" : page.toString()) + "&size=" + ((size == null) ? "10" : size.toString());
    }
    
    @RequestMapping(params = { "find=ByBookAvailableInStock", "form" }, method = RequestMethod.GET)
    public String BooksController.findBooksesByBookAvailableInStockForm(Model model) {
        return "bookses/findBooksesByBookAvailableInStock";
    }
    
    @RequestMapping(params = "find=ByBookAvailableInStock", method = RequestMethod.GET)
    public String BooksController.findBooksesByBookAvailableInStock(@RequestParam(value = "bookAvailableInStock", required = false) Boolean bookAvailableInStock, Model model) {
        model.addAttribute("bookses", Books.findBooksesByBookAvailableInStock(bookAvailableInStock == null ? new Boolean(false) : bookAvailableInStock).getResultList());
        return "bookses/list";
    }
    
    @RequestMapping(params = { "find=ByBookTitle", "form" }, method = RequestMethod.GET)
    public String BooksController.findBooksesByBookTitleForm(Model model) {
        return "bookses/findBooksesByBookTitle";
    }
    
    @RequestMapping(params = "find=ByBookTitle", method = RequestMethod.GET)
    public String BooksController.findBooksesByBookTitle(@RequestParam("bookTitle") String bookTitle, Model model) {
        model.addAttribute("bookses", Books.findBooksesByBookTitle(bookTitle).getResultList());
        return "bookses/list";
    }
    
    @RequestMapping(params = { "find=ByBookAuthor", "form" }, method = RequestMethod.GET)
    public String BooksController.findBooksesByBookAuthorForm(Model model) {
        return "bookses/findBooksesByBookAuthor";
    }
    
    @RequestMapping(params = "find=ByBookAuthor", method = RequestMethod.GET)
    public String BooksController.findBooksesByBookAuthor(@RequestParam("bookAuthor") String bookAuthor, Model model) {
        model.addAttribute("bookses", Books.findBooksesByBookAuthor(bookAuthor).getResultList());
        return "bookses/list";
    }
    
    Converter<Books, String> BooksController.getBooksConverter() {
        return new Converter<Books, String>() {
            public String convert(Books books) {
                return new StringBuilder().append(books.getBookISBN()).append(" ").append(books.getBookTitle()).append(" ").append(books.getBookAuthor()).toString();
            }
        };
    }
    
    @PostConstruct
    void BooksController.registerConverters() {
        conversionService.addConverter(getBooksConverter());
    }
    
    void BooksController.addDateTimeFormatPatterns(Model model) {
        model.addAttribute("books_bookpublishdate_date_format", DateTimeFormat.patternForStyle("S-", LocaleContextHolder.getLocale()));
    }
    
    private String BooksController.encodeUrlPathSegment(String pathSegment, HttpServletRequest request) {
        String enc = request.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        }
        catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
