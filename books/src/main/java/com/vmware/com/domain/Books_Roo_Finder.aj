// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.vmware.com.domain;

import com.vmware.com.domain.Books;
import java.lang.Boolean;
import java.lang.String;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Books_Roo_Finder {
    
    public static TypedQuery<Books> Books.findBooksesByBookAvailableInStock(Boolean bookAvailableInStock) {
        if (bookAvailableInStock == null) throw new IllegalArgumentException("The bookAvailableInStock argument is required");
        EntityManager em = Books.entityManager();
        TypedQuery<Books> q = em.createQuery("SELECT Books FROM Books AS books WHERE books.bookAvailableInStock = :bookAvailableInStock", Books.class);
        q.setParameter("bookAvailableInStock", bookAvailableInStock);
        return q;
    }
    
    public static TypedQuery<Books> Books.findBooksesByBookTitle(String bookTitle) {
        if (bookTitle == null || bookTitle.length() == 0) throw new IllegalArgumentException("The bookTitle argument is required");
        EntityManager em = Books.entityManager();
        TypedQuery<Books> q = em.createQuery("SELECT Books FROM Books AS books WHERE books.bookTitle = :bookTitle", Books.class);
        q.setParameter("bookTitle", bookTitle);
        return q;
    }
    
    public static TypedQuery<Books> Books.findBooksesByBookAuthor(String bookAuthor) {
        if (bookAuthor == null || bookAuthor.length() == 0) throw new IllegalArgumentException("The bookAuthor argument is required");
        EntityManager em = Books.entityManager();
        TypedQuery<Books> q = em.createQuery("SELECT Books FROM Books AS books WHERE books.bookAuthor = :bookAuthor", Books.class);
        q.setParameter("bookAuthor", bookAuthor);
        return q;
    }
    
}
